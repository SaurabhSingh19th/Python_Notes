"""
string_ = 'selenium'
1. WAP to print the no. of occurrence of each character
2. WAP to sort the list on the basis of occurrence
"""
# string_ = 'selenium'
#
# from collections import defaultdict
# dd = defaultdict(int)
#
# for char in string_:
#     dd[char] = string_.count(char)
#
# print(dd)
# defaultdict(<class 'int'>, {'s': 1, 'e': 2, 'l': 1, 'n': 1, 'i': 1, 'u': 1, 'm': 1})

# Now I want to sort the above dictionary based on occurrence
# res = sorted(dd.items(), key=lambda item: item[-1])
# print(res)
# [('s', 1), ('l', 1), ('n', 1), ('i', 1), ('u', 1), ('m', 1), ('e', 2)]

# if we want the output in dictionary
# print(dict(res))
# {'s': 1, 'l': 1, 'n': 1, 'i': 1, 'u': 1, 'm': 1, 'e': 2}

# ---------------------------------------------------------------------------------------------------------------------
""" 
Write a login page? 
How to automate a login page interacting with an excel file or Html file, in the login page there was a username, 
password & login button
"""

# class Login:
#     testbox_username_id = "Email"
#     testbox_password_id = "password123"
#     login_button_xpath = "//input[@class='button-login']"
#     logout_linktext = "Logout"
#
#     def __init__(self, driver):
#         self.driver = driver
#
#     def SetUserName(self, username):
#         self.driver.find_element_by_id(self.testbox_username_id).send_keys(username)

#     def SetPassword(self, password):
#         self.driver.find_element_by_id(self.testbox_password_id).send_keys(password)

#    def clk_login(self):
#         self.driver.find_element_by_xpath(self.login_button_xpath).click()

#    def clk_logout(self):
#         self.driver.find_element_by_linktext(self.logout_linktext).click()

# ---------------------------------------------------------------------------------------------------------------------
""" remove duplicate elements from the list"""
# ---------------------------------------------------------------------------------------------------------------------
""" reverse a list """
# l = ['Baby', 'Dragon', 26, 1996, 'India']

# Method 1: by using reversed()
# res = []
# for word in reversed(l):
#     res.append(word)
#
# print(res)                                          # ['India', 1996, 26, 'Dragon', 'Baby']

# Method 2: using comprehension
# print([word for word in reversed(l)])               # ['India', 1996, 26, 'Dragon', 'Baby']

# print([word for word in l[::-1]])                   # ['India', 1996, 26, 'Dragon', 'Baby']

# ---------------------------------------------------------------------------------------------------------------------
""" find the second highest no from set """
# s = {10, 20, 30, 4}

# Method 1 using sorted (first preference)
# res = sorted(s)
# print(res[-2])          # 20


# Method 2 type cast (2nd preference)
# l = list(s)
# l.sort()
# print(l[-2])            # 20

# Method 3:
# max_ = 0            # highest value
# max2_ = 0           # second-highest value
# for item in s:
#     if item > max_:
#         max2_ = max_
#         max_ = item
#
#
# print(f'Maximum value {max_}')
# print(f'Second highest value {max2_}')
# Maximum value 30
# Second highest value 20

# print(max(s))           # 30

# print(set("hai"))
# {'i', 'a', 'h'}

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
