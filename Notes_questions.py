""" 13.1 How to check the current version of Python """
# There are two ways:
# 1. in Pycharm in terminal we write    =>  python --version
# 2. in Command prompt                  =>  python --version
# 3. in Pycharm                         =>  if we observe carefully right-bottom it is showing version of the Python

# ---------------------------------------------------------------------------------------------------------------------

""" 13.2 How to get the current time """
# first we have to import some module

# Method 1:
# from datetime import datetime
# print(datetime.now())
# 2022-06-21 20:31:49.569863

# from datetime import date
# print(date.today())
# 2022-06-21

# Method 2:
# import time
# print(time.localtime(time.time()))
# time.struct_time(tm_year=2022, tm_mon=6, tm_mday=21, tm_hour=20, tm_min=30, tm_sec=29, tm_wday=1, tm_yday=172, tm_isdst=0)

# ---------------------------------------------------------------------------------------------------------------------

""" 13.3 How to generate random number """
# first we have to import
# import random
# print(random.randint(1, 101))

# ---------------------------------------------------------------------------------------------------------------------

""" Write a program to get a list, sorted in increasing order by the last element in each tuple from a given list of
non-empty tuples. """

# l = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
l = [("hai", "hello"), ("Python", "java"), ("c", "Js")]

# d = {i: j for i, j in l}
#
# res = sorted(d.items(), key=lambda item: item[-1])
# print(res)


# def sort_(item):
#     item1, item2 = item
#     return item2
#
#
# res = sorted(l, key=sort_)
# print(res)


# ---------------------------------------------------------------------------------------------------------------------

""" find the second highest value in the given dictionary"""
# d = {"a": 20, "b": 10, "c": 30, "d": 30}
# l = []
# for key, value in d.items():
#     if value not in l:
#         l.append(value)
#
# res = sorted(l)
# print(res[-2])

# d = {"a": 20, "b": 10, "c": 30, "d": 30}
#
# from collections import defaultdict
# d1 = defaultdict(int)
# # d1 = {}
# for key, value in d.items():
#     if d[key] not in d1.values():
#         d1[key] = value
#
# res = sorted(d1.items(), key=lambda item: item[-1])
# print(res[-2])

# ---------------------------------------------------------------------------------------------------------------------

""" """
# input = 25
# output = 425

# Method 1: using concatenation
# i = str(input)
# res = ""
# for num in i:
#     # res = res + str(int(num)**2)
#     res += str(int(num)**2)
# print(res)

# Method 2:
# l = "623"
# res = []
# for i in l:
#     res.append(str(int(i)**2))
# output = "".join(res)
# print(output)

# ---------------------------------------------------------------------------------------------------------------------

""" 122 Print all the missing numbers from 1 to 10 in the below list """
# numbers = [1, 3, 6, 8, 10]
# for num in range(1, 11):
#     if num not in numbers:
#         print(f'Missing Number is {num}')

# ---------------------------------------------------------------------------------------------------------------------

""" 123 Write a python program to get the below output """
# l1 = [1, 2, 3]
# l2 = ['a', 'b', 'c']
# # o/p1 ['1a', '2b', '3c']
# # o/p2 ['1a', '1b', '1c', '2a', '2b', '2c', '3a', '3b', '3c']
#
# # Output1:
# res = [str(i) + j for i, j in zip(l1, l2)]
# print(res)
#
# # Output2
# l = []
# for i in l1:
#     for j in l2:
#         l.append(str(i) + j)
# print(l)

# Method 2:
# res = [''.join((str(i), j)) for i in l1 for j in l2]
# print(res)

# ---------------------------------------------------------------------------------------------------------------------

""" find the second highest no from set """
s = {10, 20, 30, 4}

# Method 1 using sorted (first preference)
# res = sorted(s)
# print(res[-2])          # 20


# Method 2 type cast (2nd preference)
# l = list(s)
# l.sort()
# print(l[-2])            # 20

# Method 3:this method not work in all the conditions like l = [100, 20, 10, 5, 2, 1, 0] or s = [1000, 999, 2000,
# 10, 5000, 0, 5000, 20, 10, 0] to avoid this problem we use one more condition that is inside a elif statement

# s = [100, 20, 10, 5, 2, 1, 0]
# s = [1000, 999, 2000, 10, 5000, 0, 5000, 20, 10, 0]

# max_ = 0            # highest value
# max2_ = 0           # second-highest value
# for item in set(s):
#     if item > max_:
#         max2_ = max_
#         max_ = item
#     elif item > max2_:
#         max2_ = item
#
#
# print(f'Maximum value {max_}')
# print(f'Second highest value {max2_}')
# Maximum value 30
# Second highest value 20

# print(max(s))           # 30

# ---------------------------------------------------------------------------------------------------------------------

""" 1. Write a program to find the length of the string without using inbuilt function (len)"""

# s = "marshmello"
# count_ = 0
# for _ in s:
#     count_ += 1
# print(count_)

# Method 2: by using function

# def count_(traverse):
#     _count = 0
#     for _ in traverse:
#         _count += 1
#     return _count


# print(count_("marshmello"))                         # 10
# print(count_([1, 2, "hai", 9]))                     # 4
# print(count_((1, 2, 9, 66)))                        # 4
# print(count_({1, 9, 8}))                            # 3
# print(count_({"a": 1, "b": 2, "c": 3}))             # 3

# ---------------------------------------------------------------------------------------------------------------------
""" 3. Write a program to replace one string with another. e.g. "Hello World" replace "World" with "Universe". """
# s = "Hello World"

# Method 1:
# res = s.replace("World", "Universe")
# print(res)

# Method 2:
# res = []
# for word in s.split():
#     if word == "World":
#         res.append("Universe")
#     else:
#         res.append(word)
#
# print(" ".join(res))

# ---------------------------------------------------------------------------------------------------------------------

""" 2. Write a program to reverse a string without using any inbuilt functions """
# s = "dream big"
# s = "unicorn"

# ==> without using built-in-function

# Method 1: by using concatenation
# output = ""
# for char in s:
#     output = char + output
#
# print(output)

# ==> by using built-in-function
# Method 1: by using range
# res = ""
# for index in range(len(s)-1, -1, -1):
#     res += s[index]
#
# print(res)                                # gib maerd

# Method 3: by using reversed
# for char in reversed(s):
#     print(char,end="")

# ---------------------------------------------------------------------------------------------------------------------
"  How to convert integer into string without using string methods?"""

# Method 1: by using concatenation
# number = 9876
# num = number
# res = ""
# while num > 0:                # or while num:
#     rem = num % 10
#     if rem == 0:
#         res = '0' + res
#     elif rem == 1:
#         res = '1' + res
#     elif rem == 2:
#         res = '2' + res
#     elif rem == 3:
#         res = '3' + res
#     elif rem == 4:
#         res = '4' + res
#     elif rem == 5:
#         res = '5' + res
#     elif rem == 6:
#         res = '6' + res
#     elif rem == 7:
#         res = '7' + res
#     elif rem == 8:
#         res = '8' + res
#     else:
#         res = '9' + res
#     num = num // 10
#
# print(res)
# print(type(res))

# Method2: using ASCII value of digits (The idea is to use the ASCII value of the digits from 0 to 9 start from 48 â€“ 57)
# num = 506
# s = []
# while num:
#     s.append(chr(48 + num % 10))
#     num = num // 10
# a = "".join(reversed(s))                                  # ****** here no need to type cast & for loop (reversed())
#
# print(a)
# print(type(a))
# 506
# <class 'str'>

# ---------------------------------------------------------------------------------------------------------------------
""" Write generator program to count the number of numbers inside list ."""


# def count_(list_, _count=0):
#     for _ in list_:
#         _count += 1
#     yield _count
#
#
# res = count_([1, 2, 3, 4, 5, 10])               # <generator object count_ at 0x000002B2425A66C8>
# print(next(res))                                # 6
#
# print(next(count_([3, 4, 5, 6])))               # 4
# ---------------------------------------------------------------------------------------------------------------------
# d = {"a": 10, "b": 20, "c": 30}
#
# # our requirement is We want to add 1 of each value or increment the value of d
#
# for key in d:
#     d[key] = d[key] + 1

# print(d)
# ---------------------------------------------------------------------------------------------------------------------
""" 7. Write a Program to print ascii values of the characters present in a string. """


# def ascii_value(character):
#     for char in character:
#         print(ord(char), end=" ")
#
#
# ascii_value("Sea")
# print()
# ascii_value("p")
# print()
# ascii_value(input("Enter a character: "))
# ---------------------------------------------------------------------------------------------------------------------
""" 8. Write program to convert upper case to lower case and vice-versa with & without using inbuilt method. """
# sentence = "Ocean Of The Blue Sea"

# ==> Without using built-in-method
# res = ""
# for char in sentence:
#     if 'a' <= char <= 'z':
#         res += chr(ord(char) - 32)
#     elif "A" <= char <= "Z":
#         res += chr(ord(char) + 32)
#     else:
#         res += char
# print(res)


# Method 2: **************************************************************************************************

# def convert(any_string):
#     l = []
#     for char in any_string:
#         temp = ord(char)
#         if temp >= 97 and temp <= 122:
#             l.append(chr(temp - 32))
#         elif temp >= 65 and temp <= 90:
#             l.append(chr(temp + 32))
#         else:
#             l.append(char)
#     return "".join(l)
#
# print(convert("Ramta Jogi"))

# ==> by using built-in-method

# print(sentence.swapcase())

# ---------------------------------------------------------------------------------------------------------------------
""" 9. Write program to swap two numbers with & without using 3rd variable. """

# ==> without using 3rd variable


# def swap_num(a, b):
#     a, b = b, a
#     return a, b
#
#
# print(swap_num(11, 21))                   # (21, 11)


# def swap_num(a, b):
#     a = a + b
#     b = a - b
#     a = a - b
#     return a, b
#
#
# print(swap_num(101, 201))


# ==> by using 3rd variable


# def swap_number(a, b):
#     c = a
#     a = b
#     b = c
#     return a, b
#
#
# print(swap_number(501, 1111))



# ---------------------------------------------------------------------------------------------------------------------
""" """
# num = 14345
# number = str(num)
# sum_ = 0
# for i in number:
#     sum_ += int(i)
#
# print(sum_)

# ---------------------------------------------------------------------------------------------------------------------
""" """
# s = "python"
#
# res = ""
# for i in range(0, len(s)-1, 2):
#     res += s[i+1] + s[i]
# print(res)


# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
""" 14. Write a program to check if the given string is Palindrome or not """

# Method 1: using for loop & concatenation


# def palindrome(string):
#     res = ""
#     for char in string:
#         res = char + res
#     if res == string:
#         print(f'{string} is Palindrome')
#     else:
#         print(f'{string} is not Palindrome')
#
#
# palindrome("malayalam")     # malayalam is Palindrome
# palindrome("python")        # python is not Palindrome


# Method: by using slicing

# def is_palindrome(any_string):
#     res = any_string[::-1]
#     if res == any_string:
#         return f'{any_string} is palindrome'
#     return f'{any_string} is not palindrome'
#
#
# print(is_palindrome("radar"))           # radar is palindrome
# print(is_palindrome("india"))           # india is not palindrome

# Method 3: by using reversed method:


# def palindrome(any_string):
#     res = ""
#     for char in reversed(any_string):
#         res += char
#     if res == any_string:
#         return f'{any_string} is Palindrome'
#     return f'{any_string} is not Palindrome'
#
#
# print(palindrome("madam"))
# print(palindrome("galaxy"))


# Method 4: by using range


# def palindrome(string):
#     res = ""
#     for index in range(len(string)-1, -1, -1):
#         res += string[index]
#     if res == string:
#         print(f'{string} is palindrome')
#     else:
#         print(f'{string} is not palindrome')
#
#
# palindrome("mom")
# palindrome(input("Enter your string: "))
# ---------------------------------------------------------------------------------------------------------------------
""" 15 Write a program to search for a character in a given string and return the corresponding index. """


# def search_char(string, find_string):
#     for index, char in enumerate(string):
#         if char == find_string:
#             print(f'Indexing position of {char} is {index}')
#
#
# search_char("La ca sa da Papel", "P")           # Indexing position of P is 12
# search_char("the vampire diary", " ")
# Indexing position of   is 3
# Indexing position of   is 11


# Method 2: by using list comprehension
# string_ = input("Enter your string: ")
# find_char = input("Enter your character that you want to find: ")
#
# l = [f'Indexing position of {char} is {index}' for index, char in enumerate(string_) if char == find_char]
# print(l)


# ---------------------------------------------------------------------------------------------------------------------
""" 17 Write a program to replace all the characters with - if the character occurs more than once in a string """
# s = "google"
# res = ""
# for char in s:
#     if s.count(char) > 1:
#         res += "-"
#     else:
#         res += char
#
# print(res)

# ---------------------------------------------------------------------------------------------------------------------

# string_expression = "12 + (3*(5-1))/4"
# print(eval(string_expression))
# # we get the output in float form ie (15.0) if we want the output in integer only then
# print(int(eval(string_expression)))

# ---------------------------------------------------------------------------------------------------------------------
""" 18 write a decorator that returns only positive values of subtraction """

# def positive_values(func):
#     def wrapper(*args, **kwargs):
#         res = func(*args, **kwargs)
#         return abs(res)
#     return wrapper
#
#
# @positive_values
# def sub(a, b):
#     return a - b
#
#
# print(sub(3, 7))
# print(sub(196, 1996))

# ---------------------------------------------------------------------------------------------------------------------
""" 127 Write a decorator to prefix +91 to the original phone numbers """
# numbers = [1234567890, 9876543210, 911234567890, 111234567890, 912345678]
#
#
# def add_prefix(number):
#     str_number = str(number)
#     if len(str_number) == 10:
#         str_number = "+91-" + str_number
#         return str_number
#     elif len(str_number) == 12 and str_number.startswith("91"):
#         str_number = "+" + str_number[:2] + "-" + str_number[2:]
#         return str_number
#     else:
#         return str_number
#
#
# def prefix_country_code(func):
#     def wrapper(*args, **kwargs):
#         temp = args[0]                           # args = [(1234567890, 9876543210, 911234567890, 111234567890),]
#         processed_numbers = [add_prefix(num) for num in temp]
#         return func(processed_numbers)
#     return wrapper
#
#
# @prefix_country_code
# def print_numbers(phone_numbers):
#     for num in phone_numbers:
#         print(num)
#
#
# print_numbers(numbers)

# ---------------------------------------------------------------------------------------------------------------------

""" 20 Write a function which takes a list of strings and integers. If the item is a string it should print as is and 
if the item is integer or float it should reverse it. """
# list_ = ['apple', 'yahoo', '1234', 100, 99.61, '20.1']
#
#
# def func(items):
#     l = []
#     for item in items:
#         if isinstance(item, (int, float)):
#             l.append(str(item)[::-1])
#         else:
#             l.append(item)
#     return l
#
#
# print(func(list_))
# ---------------------------------------------------------------------------------------------------------------------

""" 24 Write a python program to get the below output """
sentence = "Hi How are you"
# o/p should be "uoy era woH iH"

# Method 1: by using reversed function
# l = sentence.split()
# for word in reversed(l):
#     print(word[::-1], end=" ")
#
# print()

# Method 2: by using slicing:
# for word in l[::-1]:
#     print(word[::-1], end=" ")
#
# print()

# Method 2: by using range
# for index in range(len(l)-1, -1, -1):
#     print(l[index][::-1], end=" ")

# ---------------------------------------------------------------------------------------------------------------------
""" 25 Write a lambda function to add two numbers (a, b) """
# res = lambda a, b: a + b
# print(res(2, 7))
# print(res(2+5j, 10))

# ---------------------------------------------------------------------------------------------------------------------
""" WALF that multiplies two numbers """

# multiply = lambda num1, num2: num1 * num2
# print(multiply(10, 20))             # 200
# print(multiply(2.5, 10))            # 25.0
# print(multiply(2+5j, 10))           # (20+50j)

# ---------------------------------------------------------------------------------------------------------------------
""" WALF to find greatest number between two numbers """

# greatest = lambda num1, num2: f'{num1} is greater' if num1 > num2 else f'{num2} is greater'
# print(greatest(86, 73))             # 86 is greater
# print(greatest(30.2, 49.9))         # 49.9 is greater
# print(greatest(2+5j, 5+2j))         # Type Error
# ---------------------------------------------------------------------------------------------------------------------

""" WALF to find greatest number among three numbers """

# greatest = lambda n1, n2, n3: f'{n1} is greatest' if n1 > n2 and n1 > n3 else f'{n2} is greatest' if n2 > n3 else f'{n3} is greatest '
# print(greatest(10, 21, 51))             # 51 is greatest
# print(greatest(20, 10.52, 5.05))        # 20 is greatest
# print(greatest(101, 115.5, 110))        # 115.5 is greatest
# ---------------------------------------------------------------------------------------------------------------------
""" WAP to find the output of the given expression. Expression a^2 + b^2 + 2ab"""


# expression = lambda num1, num2: num1 ** 2 + num2 ** 2 + 2 * num1 * num2
# print(expression(2, 3))                 # 25
# ---------------------------------------------------------------------------------------------------------------------

""" WALF that checks if the given string is Palindrome or not """

# Method 1:
# palindrome = lambda item: item == item[::-1]
# print(palindrome("mom"))                        #  True

# Method 2:
# palindrome = lambda item: f'{item} is Palindrome' if item == item[::-1] else f'{item} is not Palindrome'
#
# print(palindrome("madam"))
# print(palindrome("fashion"))

# ---------------------------------------------------------------------------------------------------------------------
""" 27 How to remove duplicates from the list without using inbuilt functions """

# ==> without using built-in function
# Method 1:
items = [1, 2, 3, 4, 1, 2, 3, 4, 5]
# l = []
# for item in items:
#     if item not in l:
#         l.append(item)
# print(l)


# Method 2:
# print(set(items))           # {1, 2, 3, 4, 5} but we get the output in set collection => to avoid this => type cast
# print(list(set(items)))     # [1, 2, 3, 4, 5]


# Method 3: using comprehension
l = []
[l.append(item) for item in items if item not in l]
print(l)

# Method 4: using enumerate
res = [item for i, item in enumerate(items) if item not in items[:i]]
print(res)

# Method 5:
from collections import OrderedDict
# result = OrderedDict.fromkeys(items)
# print(result)                           # OrderedDict([(1, None), (2, None), (3, None), (4, None), (5, None)])

result = list(OrderedDict.fromkeys(items))
print(result)


# ==> using built-in function






# ---------------------------------------------------------------------------------------------------------------------
""" 28 Find the longest word in the sentence """
# sentence = "Hello world. Welcome to Python"
# l = sentence.split()
#
# # by using sorted function
# res = sorted(l, key=len)
# print(res[-1])                                              # Welcome
#
# # dictionary
# d = {word: len(word) for word in l}
# print(max(d.items(), key=lambda item: item[-1]))            # ('Welcome', 7)

# ---------------------------------------------------------------------------------------------------------------------
""" 29 write a program to reverse the values in the dictionary if the value is of type String """
d = {'a': 'hello', 'b': 100, 'c': 10.1, 'd': 'world'}
dictionary = {key: value[::-1] for key, value in d.items() if isinstance(value, str)}
print(dictionary)


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------



# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------



# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------